create type "public"."gender_types" as enum ('male', 'female', 'non-binary');

create type "public"."profile_type" as enum ('user', 'participant');

create table "public"."diets" (
    "id" uuid not null default gen_random_uuid(),
    "name" text not null,
    "description" text,
    "created_at" timestamp without time zone default now()
);


alter table "public"."diets" enable row level security;

create table "public"."food_preferences" (
    "id" uuid not null default gen_random_uuid(),
    "profile_id" uuid,
    "diet_id" uuid,
    "allergies" text[],
    "disliked_foods" text[],
    "created_at" timestamp without time zone default now(),
    "updated_at" timestamp without time zone default now()
);


alter table "public"."food_preferences" enable row level security;

create table "public"."meals_plans" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "plan" json,
    "portions_count" bigint,
    "created_by" uuid,
    "status" text,
    "error" text,
    "usage" jsonb
);


alter table "public"."meals_plans" enable row level security;

create table "public"."profiles" (
    "id" uuid not null default uuid_generate_v4(),
    "updated_at" timestamp with time zone,
    "username" text,
    "full_name" text,
    "avatar_url" text,
    "website" text,
    "age" integer,
    "gender" gender_types,
    "height" integer,
    "weight" double precision,
    "type" profile_type default 'user'::profile_type
);


alter table "public"."profiles" enable row level security;

create table "public"."profiles_links" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "profile_id_1" uuid not null,
    "profile_id_2" uuid not null,
    "are_regular_meal_companions" boolean not null default false
);


alter table "public"."profiles_links" enable row level security;

create table "public"."recipes" (
    "id" uuid not null default gen_random_uuid(),
    "ingredients" text not null,
    "steps" text not null,
    "portions_number" integer not null,
    "created_by" uuid not null,
    "created_at" timestamp with time zone default now()
);


alter table "public"."recipes" enable row level security;

create table "public"."saved_recipes" (
    "profile_id" uuid not null,
    "recipe_id" uuid not null,
    "saved_at" timestamp with time zone default now()
);


alter table "public"."saved_recipes" enable row level security;

CREATE UNIQUE INDEX diets_name_key ON public.diets USING btree (name);

CREATE UNIQUE INDEX diets_pkey ON public.diets USING btree (id);

CREATE UNIQUE INDEX food_preferences_pkey ON public.food_preferences USING btree (id);

CREATE INDEX idx_meals_plans_status ON public.meals_plans USING btree (status);

CREATE UNIQUE INDEX meals_plans_pkey ON public.meals_plans USING btree (id);

CREATE UNIQUE INDEX profiles_links_pkey ON public.profiles_links USING btree (id);

CREATE UNIQUE INDEX profiles_pkey ON public.profiles USING btree (id);

CREATE UNIQUE INDEX profiles_username_key ON public.profiles USING btree (username);

CREATE UNIQUE INDEX recipes_pkey ON public.recipes USING btree (id);

CREATE UNIQUE INDEX saved_recipes_pkey ON public.saved_recipes USING btree (profile_id, recipe_id);

alter table "public"."diets" add constraint "diets_pkey" PRIMARY KEY using index "diets_pkey";

alter table "public"."food_preferences" add constraint "food_preferences_pkey" PRIMARY KEY using index "food_preferences_pkey";

alter table "public"."meals_plans" add constraint "meals_plans_pkey" PRIMARY KEY using index "meals_plans_pkey";

alter table "public"."profiles" add constraint "profiles_pkey" PRIMARY KEY using index "profiles_pkey";

alter table "public"."profiles_links" add constraint "profiles_links_pkey" PRIMARY KEY using index "profiles_links_pkey";

alter table "public"."recipes" add constraint "recipes_pkey" PRIMARY KEY using index "recipes_pkey";

alter table "public"."saved_recipes" add constraint "saved_recipes_pkey" PRIMARY KEY using index "saved_recipes_pkey";

alter table "public"."diets" add constraint "diets_name_key" UNIQUE using index "diets_name_key";

alter table "public"."food_preferences" add constraint "food_preferences_diet_id_fkey" FOREIGN KEY (diet_id) REFERENCES diets(id) ON DELETE SET NULL not valid;

alter table "public"."food_preferences" validate constraint "food_preferences_diet_id_fkey";

alter table "public"."food_preferences" add constraint "food_preferences_profile_id_fkey" FOREIGN KEY (profile_id) REFERENCES profiles(id) ON DELETE CASCADE not valid;

alter table "public"."food_preferences" validate constraint "food_preferences_profile_id_fkey";

alter table "public"."meals_plans" add constraint "meals_plans_profile_id_fkey" FOREIGN KEY (created_by) REFERENCES profiles(id) ON UPDATE CASCADE ON DELETE SET NULL not valid;

alter table "public"."meals_plans" validate constraint "meals_plans_profile_id_fkey";

alter table "public"."profiles" add constraint "profiles_height_check" CHECK ((height > 0)) not valid;

alter table "public"."profiles" validate constraint "profiles_height_check";

alter table "public"."profiles" add constraint "profiles_username_key" UNIQUE using index "profiles_username_key";

alter table "public"."profiles" add constraint "profiles_weight_check" CHECK ((weight > (0)::double precision)) not valid;

alter table "public"."profiles" validate constraint "profiles_weight_check";

alter table "public"."profiles" add constraint "username_length" CHECK ((char_length(username) >= 3)) not valid;

alter table "public"."profiles" validate constraint "username_length";

alter table "public"."profiles_links" add constraint "profiles_links_profile_id_1_fkey" FOREIGN KEY (profile_id_1) REFERENCES profiles(id) not valid;

alter table "public"."profiles_links" validate constraint "profiles_links_profile_id_1_fkey";

alter table "public"."profiles_links" add constraint "profiles_links_profile_id_2_fkey" FOREIGN KEY (profile_id_2) REFERENCES profiles(id) not valid;

alter table "public"."profiles_links" validate constraint "profiles_links_profile_id_2_fkey";

alter table "public"."recipes" add constraint "recipes_created_by_fkey" FOREIGN KEY (created_by) REFERENCES profiles(id) not valid;

alter table "public"."recipes" validate constraint "recipes_created_by_fkey";

alter table "public"."saved_recipes" add constraint "saved_recipes_profile_id_fkey" FOREIGN KEY (profile_id) REFERENCES profiles(id) not valid;

alter table "public"."saved_recipes" validate constraint "saved_recipes_profile_id_fkey";

alter table "public"."saved_recipes" add constraint "saved_recipes_recipe_id_fkey" FOREIGN KEY (recipe_id) REFERENCES recipes(id) not valid;

alter table "public"."saved_recipes" validate constraint "saved_recipes_recipe_id_fkey";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.check_table_exists(p_table_name text)
 RETURNS boolean
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$
BEGIN
  RETURN EXISTS (
    SELECT FROM information_schema.tables 
    WHERE table_schema = 'public' AND table_name = p_table_name
  );
END;
$function$
;

CREATE OR REPLACE FUNCTION public.handle_new_user()
 RETURNS trigger
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$
BEGIN
  INSERT INTO public.profiles (id, username, type)
  VALUES (new.id, new.email, 'user');
  RETURN new;
END;
$function$
;

CREATE OR REPLACE FUNCTION public.insert_food_preference()
 RETURNS trigger
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$
BEGIN
    -- Add SECURITY DEFINER to bypass RLS
    INSERT INTO public.food_preferences (profile_id)
    VALUES (NEW.id);
    RETURN NEW;
END;
$function$
;

grant delete on table "public"."diets" to "anon";

grant insert on table "public"."diets" to "anon";

grant references on table "public"."diets" to "anon";

grant select on table "public"."diets" to "anon";

grant trigger on table "public"."diets" to "anon";

grant truncate on table "public"."diets" to "anon";

grant update on table "public"."diets" to "anon";

grant delete on table "public"."diets" to "authenticated";

grant insert on table "public"."diets" to "authenticated";

grant references on table "public"."diets" to "authenticated";

grant select on table "public"."diets" to "authenticated";

grant trigger on table "public"."diets" to "authenticated";

grant truncate on table "public"."diets" to "authenticated";

grant update on table "public"."diets" to "authenticated";

grant delete on table "public"."diets" to "service_role";

grant insert on table "public"."diets" to "service_role";

grant references on table "public"."diets" to "service_role";

grant select on table "public"."diets" to "service_role";

grant trigger on table "public"."diets" to "service_role";

grant truncate on table "public"."diets" to "service_role";

grant update on table "public"."diets" to "service_role";

grant delete on table "public"."food_preferences" to "anon";

grant insert on table "public"."food_preferences" to "anon";

grant references on table "public"."food_preferences" to "anon";

grant select on table "public"."food_preferences" to "anon";

grant trigger on table "public"."food_preferences" to "anon";

grant truncate on table "public"."food_preferences" to "anon";

grant update on table "public"."food_preferences" to "anon";

grant delete on table "public"."food_preferences" to "authenticated";

grant insert on table "public"."food_preferences" to "authenticated";

grant references on table "public"."food_preferences" to "authenticated";

grant select on table "public"."food_preferences" to "authenticated";

grant trigger on table "public"."food_preferences" to "authenticated";

grant truncate on table "public"."food_preferences" to "authenticated";

grant update on table "public"."food_preferences" to "authenticated";

grant delete on table "public"."food_preferences" to "service_role";

grant insert on table "public"."food_preferences" to "service_role";

grant references on table "public"."food_preferences" to "service_role";

grant select on table "public"."food_preferences" to "service_role";

grant trigger on table "public"."food_preferences" to "service_role";

grant truncate on table "public"."food_preferences" to "service_role";

grant update on table "public"."food_preferences" to "service_role";

grant delete on table "public"."meals_plans" to "anon";

grant insert on table "public"."meals_plans" to "anon";

grant references on table "public"."meals_plans" to "anon";

grant select on table "public"."meals_plans" to "anon";

grant trigger on table "public"."meals_plans" to "anon";

grant truncate on table "public"."meals_plans" to "anon";

grant update on table "public"."meals_plans" to "anon";

grant delete on table "public"."meals_plans" to "authenticated";

grant insert on table "public"."meals_plans" to "authenticated";

grant references on table "public"."meals_plans" to "authenticated";

grant select on table "public"."meals_plans" to "authenticated";

grant trigger on table "public"."meals_plans" to "authenticated";

grant truncate on table "public"."meals_plans" to "authenticated";

grant update on table "public"."meals_plans" to "authenticated";

grant delete on table "public"."meals_plans" to "service_role";

grant insert on table "public"."meals_plans" to "service_role";

grant references on table "public"."meals_plans" to "service_role";

grant select on table "public"."meals_plans" to "service_role";

grant trigger on table "public"."meals_plans" to "service_role";

grant truncate on table "public"."meals_plans" to "service_role";

grant update on table "public"."meals_plans" to "service_role";

grant delete on table "public"."profiles" to "anon";

grant insert on table "public"."profiles" to "anon";

grant references on table "public"."profiles" to "anon";

grant select on table "public"."profiles" to "anon";

grant trigger on table "public"."profiles" to "anon";

grant truncate on table "public"."profiles" to "anon";

grant update on table "public"."profiles" to "anon";

grant delete on table "public"."profiles" to "authenticated";

grant insert on table "public"."profiles" to "authenticated";

grant references on table "public"."profiles" to "authenticated";

grant select on table "public"."profiles" to "authenticated";

grant trigger on table "public"."profiles" to "authenticated";

grant truncate on table "public"."profiles" to "authenticated";

grant update on table "public"."profiles" to "authenticated";

grant delete on table "public"."profiles" to "service_role";

grant insert on table "public"."profiles" to "service_role";

grant references on table "public"."profiles" to "service_role";

grant select on table "public"."profiles" to "service_role";

grant trigger on table "public"."profiles" to "service_role";

grant truncate on table "public"."profiles" to "service_role";

grant update on table "public"."profiles" to "service_role";

grant delete on table "public"."profiles_links" to "anon";

grant insert on table "public"."profiles_links" to "anon";

grant references on table "public"."profiles_links" to "anon";

grant select on table "public"."profiles_links" to "anon";

grant trigger on table "public"."profiles_links" to "anon";

grant truncate on table "public"."profiles_links" to "anon";

grant update on table "public"."profiles_links" to "anon";

grant delete on table "public"."profiles_links" to "authenticated";

grant insert on table "public"."profiles_links" to "authenticated";

grant references on table "public"."profiles_links" to "authenticated";

grant select on table "public"."profiles_links" to "authenticated";

grant trigger on table "public"."profiles_links" to "authenticated";

grant truncate on table "public"."profiles_links" to "authenticated";

grant update on table "public"."profiles_links" to "authenticated";

grant delete on table "public"."profiles_links" to "service_role";

grant insert on table "public"."profiles_links" to "service_role";

grant references on table "public"."profiles_links" to "service_role";

grant select on table "public"."profiles_links" to "service_role";

grant trigger on table "public"."profiles_links" to "service_role";

grant truncate on table "public"."profiles_links" to "service_role";

grant update on table "public"."profiles_links" to "service_role";

grant delete on table "public"."recipes" to "anon";

grant insert on table "public"."recipes" to "anon";

grant references on table "public"."recipes" to "anon";

grant select on table "public"."recipes" to "anon";

grant trigger on table "public"."recipes" to "anon";

grant truncate on table "public"."recipes" to "anon";

grant update on table "public"."recipes" to "anon";

grant delete on table "public"."recipes" to "authenticated";

grant insert on table "public"."recipes" to "authenticated";

grant references on table "public"."recipes" to "authenticated";

grant select on table "public"."recipes" to "authenticated";

grant trigger on table "public"."recipes" to "authenticated";

grant truncate on table "public"."recipes" to "authenticated";

grant update on table "public"."recipes" to "authenticated";

grant delete on table "public"."recipes" to "service_role";

grant insert on table "public"."recipes" to "service_role";

grant references on table "public"."recipes" to "service_role";

grant select on table "public"."recipes" to "service_role";

grant trigger on table "public"."recipes" to "service_role";

grant truncate on table "public"."recipes" to "service_role";

grant update on table "public"."recipes" to "service_role";

grant delete on table "public"."saved_recipes" to "anon";

grant insert on table "public"."saved_recipes" to "anon";

grant references on table "public"."saved_recipes" to "anon";

grant select on table "public"."saved_recipes" to "anon";

grant trigger on table "public"."saved_recipes" to "anon";

grant truncate on table "public"."saved_recipes" to "anon";

grant update on table "public"."saved_recipes" to "anon";

grant delete on table "public"."saved_recipes" to "authenticated";

grant insert on table "public"."saved_recipes" to "authenticated";

grant references on table "public"."saved_recipes" to "authenticated";

grant select on table "public"."saved_recipes" to "authenticated";

grant trigger on table "public"."saved_recipes" to "authenticated";

grant truncate on table "public"."saved_recipes" to "authenticated";

grant update on table "public"."saved_recipes" to "authenticated";

grant delete on table "public"."saved_recipes" to "service_role";

grant insert on table "public"."saved_recipes" to "service_role";

grant references on table "public"."saved_recipes" to "service_role";

grant select on table "public"."saved_recipes" to "service_role";

grant trigger on table "public"."saved_recipes" to "service_role";

grant truncate on table "public"."saved_recipes" to "service_role";

grant update on table "public"."saved_recipes" to "service_role";

create policy "Authenticated users can see all diets"
on "public"."diets"
as permissive
for select
to authenticated
using (true);


create policy "Users can create food preferences for their linked profiles"
on "public"."food_preferences"
as permissive
for insert
to authenticated
with check (((profile_id IN ( SELECT pl.profile_id_2
   FROM (profiles_links pl
     JOIN profiles p ON ((p.id = pl.profile_id_2)))
  WHERE ((pl.profile_id_1 = auth.uid()) AND (p.type = 'participant'::profile_type)))) OR (profile_id = auth.uid())));


create policy "Users can read food preferences for linked profiles"
on "public"."food_preferences"
as permissive
for select
to authenticated
using (((profile_id IN ( SELECT profiles_links.profile_id_2
   FROM profiles_links
  WHERE (profiles_links.profile_id_1 = auth.uid())
UNION
 SELECT profiles_links.profile_id_1
   FROM profiles_links
  WHERE (profiles_links.profile_id_2 = auth.uid()))) OR (profile_id = auth.uid())));


create policy "Users can update food preferences for linked participant profil"
on "public"."food_preferences"
as permissive
for update
to authenticated
using (((profile_id IN ( SELECT pl.profile_id_2
   FROM (profiles_links pl
     JOIN profiles p ON ((p.id = pl.profile_id_2)))
  WHERE ((pl.profile_id_1 = auth.uid()) AND (p.type = 'participant'::profile_type)))) OR (profile_id = auth.uid())));


create policy "insert_food_preferences_for_service"
on "public"."food_preferences"
as permissive
for insert
to public
with check ((auth.role() = 'service_role'::text));


create policy "insert_own_food_preferences"
on "public"."food_preferences"
as permissive
for insert
to public
with check ((auth.uid() = profile_id));


create policy "select_own_food_preferences"
on "public"."food_preferences"
as permissive
for select
to public
using ((auth.uid() = profile_id));


create policy "update_own_food_preferences"
on "public"."food_preferences"
as permissive
for update
to public
using ((auth.uid() = profile_id));


create policy "Allow all operations on meals_plans"
on "public"."meals_plans"
as permissive
for all
to public
using (true)
with check (true);


create policy "Allow all operations"
on "public"."meals_plans"
as permissive
for all
to public
using (true)
with check (true);


create policy "User can insert a meals_plan"
on "public"."meals_plans"
as permissive
for insert
to authenticated
with check ((auth.uid() = created_by));


create policy "User can real all its previous meals_plans"
on "public"."meals_plans"
as permissive
for select
to authenticated
using ((auth.uid() = created_by));


create policy "Public profiles are viewable by everyone."
on "public"."profiles"
as permissive
for select
to public
using (true);


create policy "User profiles must use auth.users id"
on "public"."profiles"
as permissive
for insert
to public
with check (((type = 'participant'::profile_type) OR ((type = 'user'::profile_type) AND (id = auth.uid()))));


create policy "Users can create profiles"
on "public"."profiles"
as permissive
for insert
to authenticated
with check (true);


create policy "Users can insert their own profile."
on "public"."profiles"
as permissive
for insert
to public
with check ((( SELECT auth.uid() AS uid) = id));


create policy "Users can read profiles linked to them"
on "public"."profiles"
as permissive
for select
to authenticated
using (((id IN ( SELECT profiles_links.profile_id_2
   FROM profiles_links
  WHERE (profiles_links.profile_id_1 = auth.uid())
UNION
 SELECT profiles_links.profile_id_1
   FROM profiles_links
  WHERE (profiles_links.profile_id_2 = auth.uid()))) OR (id = auth.uid())));


create policy "Users can update own profile."
on "public"."profiles"
as permissive
for update
to public
using ((( SELECT auth.uid() AS uid) = id));


create policy "Users can update participants linked profiles"
on "public"."profiles"
as permissive
for update
to authenticated
using ((((type = 'participant'::profile_type) AND (id IN ( SELECT profiles_links.profile_id_2
   FROM profiles_links
  WHERE (profiles_links.profile_id_1 = auth.uid())))) OR (id = auth.uid())));


create policy "Users can create profile links"
on "public"."profiles_links"
as permissive
for insert
to authenticated
with check (((profile_id_1 = auth.uid()) OR (profile_id_2 = auth.uid())));


create policy "Users can read their own profile links"
on "public"."profiles_links"
as permissive
for select
to authenticated
using (((profile_id_1 = auth.uid()) OR (profile_id_2 = auth.uid())));


create policy "Users can update their own profile links"
on "public"."profiles_links"
as permissive
for update
to authenticated
using ((profile_id_1 = auth.uid()))
with check ((profile_id_1 = auth.uid()));


create policy "Users can insert their own recipes"
on "public"."recipes"
as permissive
for insert
to authenticated
with check ((auth.uid() = created_by));


create policy "Users can view all recipes"
on "public"."recipes"
as permissive
for select
to authenticated
using (true);


create policy "Users can save recipes"
on "public"."saved_recipes"
as permissive
for insert
to authenticated
with check ((profile_id = auth.uid()));


create policy "Users can view their saved recipes"
on "public"."saved_recipes"
as permissive
for select
to authenticated
using ((profile_id = auth.uid()));


CREATE TRIGGER insert_food_preference_on_insert_profile_trg AFTER INSERT ON public.profiles FOR EACH ROW EXECUTE FUNCTION insert_food_preference();


